using System.Collections;using UnityEngine;using System.Collections.Generic;public class MessageWindow : MonoBehaviour{//#if UNITY_IPHONE    [SerializeField] private StoreKitGUIManager storeKitGUIManager = null;    [SerializeField] private UILabel purchaseSuccessfulQuestionsUILabel = null;    [SerializeField] private UILabel purchaseSuccessfulGoldUILabel = null;    [SerializeField] private UILabel purchaseCancelledUILabel = null;    [SerializeField] private UILabel purchaseErrorUILabel = null;    [SerializeField] private UILabel purchaseRestoreSucessfullUILabel = null;    [SerializeField] private UILabel purchaseRestoreErrorUILabel = null;
    [SerializeField] private UILabel purchaseRestoreNotUILabel = null;    [SerializeField] private UILabel tempQuestions = null;    [SerializeField] private UILabel tempQuestionsTrans = null;    [SerializeField] private UILabel tempGold = null;    [SerializeField] private UILabel tempGoldTrans = null;
    [SerializeField] private UILabel trans = null;    private int Vopr = 0;    private int Gold = 0;    private string VoprStr = "";    private string GoldStr = "";    void OnEnable()	{		// Listens to all the StoreKit events.  All event listeners MUST be removed before this object is disposed!		StoreKitManager.productPurchaseAwaitingConfirmationEvent += productPurchaseAwaitingConfirmationEvent;		StoreKitManager.purchaseSuccessfulEvent += purchaseSuccessful;		StoreKitManager.purchaseCancelledEvent += purchaseCancelled;		StoreKitManager.purchaseFailedEvent += purchaseFailed;		StoreKitManager.productListReceivedEvent += productListReceivedEvent;		StoreKitManager.productListRequestFailedEvent += productListRequestFailed;		StoreKitManager.restoreTransactionsFailedEvent += restoreTransactionsFailed;		StoreKitManager.restoreTransactionsFinishedEvent += restoreTransactionsFinished;		StoreKitManager.paymentQueueUpdatedDownloadsEvent += paymentQueueUpdatedDownloadsEvent;        storeKitGUIManager.ErrorPurchase += ErrorPurchase;
        storeKitGUIManager.NotPurchase += NotPurchase;        if (!StoreKitBinding.canMakePayments())        {            ShowMessageWindow(purchaseCancelledUILabel);        }	}			void OnDisable()	{		// Remove all the event handlers		StoreKitManager.productPurchaseAwaitingConfirmationEvent -= productPurchaseAwaitingConfirmationEvent;		StoreKitManager.purchaseSuccessfulEvent -= purchaseSuccessful;		StoreKitManager.purchaseCancelledEvent -= purchaseCancelled;		StoreKitManager.purchaseFailedEvent -= purchaseFailed;		StoreKitManager.productListReceivedEvent -= productListReceivedEvent;		StoreKitManager.productListRequestFailedEvent -= productListRequestFailed;		StoreKitManager.restoreTransactionsFailedEvent -= restoreTransactionsFailed;		StoreKitManager.restoreTransactionsFinishedEvent -= restoreTransactionsFinished;		StoreKitManager.paymentQueueUpdatedDownloadsEvent -= paymentQueueUpdatedDownloadsEvent;        storeKitGUIManager.ErrorPurchase -= ErrorPurchase;
        storeKitGUIManager.NotPurchase -= NotPurchase;	}	    void Update()
    {
        trans.text = storeKitGUIManager.Transact;
    }		void productListReceivedEvent( List<StoreKitProduct> productList )	{		Debug.Log( "productListReceivedEvent. total products received: " + productList.Count );				// print the products to the console		foreach( StoreKitProduct product in productList )			Debug.Log( product.ToString() + "\n" );	}			void productListRequestFailed( string error )	{		Debug.Log( "productListRequestFailed: " + error );	}		void purchaseFailed( string error )	{		Debug.Log( "purchase failed with error: " + error );        ShowMessageWindow(purchaseErrorUILabel);	}		void purchaseCancelled( string error )	{		Debug.Log( "purchase cancelled with error: " + error );	}			void productPurchaseAwaitingConfirmationEvent( StoreKitTransaction transaction )	{		Debug.Log( "productPurchaseAwaitingConfirmationEvent: " + transaction );	}			void purchaseSuccessful( StoreKitTransaction transaction )	{		Debug.Log( "purchased product: " + transaction );        if (storeKitGUIManager.ActivePurchase == 1)        {            ShowMessageWindow(purchaseSuccessfulQuestionsUILabel);            Vopr += 1;            tempQuestions.text = Vopr.ToString("f0");            VoprStr = transaction.ToString();            tempQuestionsTrans.text = VoprStr;        }        if (storeKitGUIManager.ActivePurchase == 2)        {            Gold += 1;            tempGold.text = Gold.ToString("f0");            GoldStr = transaction.ToString();            tempGoldTrans.text = GoldStr;            ShowMessageWindow(purchaseSuccessfulGoldUILabel);        }	}			void restoreTransactionsFailed( string error )	{		Debug.Log( "restoreTransactionsFailed: " + error );        ShowMessageWindow(purchaseRestoreErrorUILabel);	}			void restoreTransactionsFinished()	{		Debug.Log( "restoreTransactionsFinished" );	    ShowMessageWindow(purchaseRestoreSucessfullUILabel);	}			void paymentQueueUpdatedDownloadsEvent( List<StoreKitDownload> downloads )	{		Debug.Log( "paymentQueueUpdatedDownloadsEvent: " );		foreach( var dl in downloads )			Debug.Log( dl );	}    private void ShowMessageWindow(UILabel uiLabel)    {        animation.Play();        StopAllCoroutines();        StartCoroutine(OffText(animation.clip.length));        uiLabel.enabled = true;    }    private IEnumerator OffText(float time)    {        yield return new WaitForSeconds(time);        purchaseCancelledUILabel.enabled = false;        purchaseSuccessfulQuestionsUILabel.enabled = false;        purchaseSuccessfulGoldUILabel.enabled = false;        purchaseErrorUILabel.enabled = false;
        purchaseRestoreSucessfullUILabel.enabled = false;        purchaseRestoreErrorUILabel.enabled = false;
        purchaseRestoreNotUILabel.enabled = false;
    }    private void ErrorPurchase()    {        ShowMessageWindow(purchaseCancelledUILabel);    }

    private void NotPurchase()
    {
        ShowMessageWindow(purchaseRestoreNotUILabel);
    }}